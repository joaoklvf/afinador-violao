// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/04/2024 18:22:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    oscilador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module oscilador_vlg_sample_tst(
	afinar,
	clock,
	enable,
	up_down,
	sampler_tx
);
input  afinar;
input  clock;
input  enable;
input  up_down;
output sampler_tx;

reg sample;
time current_time;
always @(afinar or clock or enable or up_down)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module oscilador_vlg_check_tst (
	counter0_saida,
	counter2_saida,
	ddd_q,
	saida,
	sampler_rx
);
input [19:0] counter0_saida;
input [19:0] counter2_saida;
input  ddd_q;
input  saida;
input sampler_rx;

reg [19:0] counter0_saida_expected;
reg [19:0] counter2_saida_expected;
reg  ddd_q_expected;
reg  saida_expected;

reg [19:0] counter0_saida_prev;
reg [19:0] counter2_saida_prev;
reg  ddd_q_prev;
reg  saida_prev;

reg [19:0] counter0_saida_expected_prev;
reg [19:0] counter2_saida_expected_prev;
reg  ddd_q_expected_prev;
reg  saida_expected_prev;

reg [19:0] last_counter0_saida_exp;
reg [19:0] last_counter2_saida_exp;
reg  last_ddd_q_exp;
reg  last_saida_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	counter0_saida_prev = counter0_saida;
	counter2_saida_prev = counter2_saida;
	ddd_q_prev = ddd_q;
	saida_prev = saida;
end

// update expected /o prevs

always @(trigger)
begin
	counter0_saida_expected_prev = counter0_saida_expected;
	counter2_saida_expected_prev = counter2_saida_expected;
	ddd_q_expected_prev = ddd_q_expected;
	saida_expected_prev = saida_expected;
end



// expected saida
initial
begin
	saida_expected = 1'bX;
end 

// expected ddd_q
initial
begin
	ddd_q_expected = 1'bX;
end 
// expected counter0_saida[ 19 ]
initial
begin
	counter0_saida_expected[19] = 1'bX;
end 
// expected counter0_saida[ 18 ]
initial
begin
	counter0_saida_expected[18] = 1'bX;
end 
// expected counter0_saida[ 17 ]
initial
begin
	counter0_saida_expected[17] = 1'bX;
end 
// expected counter0_saida[ 16 ]
initial
begin
	counter0_saida_expected[16] = 1'bX;
end 
// expected counter0_saida[ 15 ]
initial
begin
	counter0_saida_expected[15] = 1'bX;
end 
// expected counter0_saida[ 14 ]
initial
begin
	counter0_saida_expected[14] = 1'bX;
end 
// expected counter0_saida[ 13 ]
initial
begin
	counter0_saida_expected[13] = 1'bX;
end 
// expected counter0_saida[ 12 ]
initial
begin
	counter0_saida_expected[12] = 1'bX;
end 
// expected counter0_saida[ 11 ]
initial
begin
	counter0_saida_expected[11] = 1'bX;
end 
// expected counter0_saida[ 10 ]
initial
begin
	counter0_saida_expected[10] = 1'bX;
end 
// expected counter0_saida[ 9 ]
initial
begin
	counter0_saida_expected[9] = 1'bX;
end 
// expected counter0_saida[ 8 ]
initial
begin
	counter0_saida_expected[8] = 1'bX;
end 
// expected counter0_saida[ 7 ]
initial
begin
	counter0_saida_expected[7] = 1'bX;
end 
// expected counter0_saida[ 6 ]
initial
begin
	counter0_saida_expected[6] = 1'bX;
end 
// expected counter0_saida[ 5 ]
initial
begin
	counter0_saida_expected[5] = 1'bX;
end 
// expected counter0_saida[ 4 ]
initial
begin
	counter0_saida_expected[4] = 1'bX;
end 
// expected counter0_saida[ 3 ]
initial
begin
	counter0_saida_expected[3] = 1'bX;
end 
// expected counter0_saida[ 2 ]
initial
begin
	counter0_saida_expected[2] = 1'bX;
end 
// expected counter0_saida[ 1 ]
initial
begin
	counter0_saida_expected[1] = 1'bX;
end 
// expected counter0_saida[ 0 ]
initial
begin
	counter0_saida_expected[0] = 1'bX;
end 
// expected counter2_saida[ 19 ]
initial
begin
	counter2_saida_expected[19] = 1'bX;
end 
// expected counter2_saida[ 18 ]
initial
begin
	counter2_saida_expected[18] = 1'bX;
end 
// expected counter2_saida[ 17 ]
initial
begin
	counter2_saida_expected[17] = 1'bX;
end 
// expected counter2_saida[ 16 ]
initial
begin
	counter2_saida_expected[16] = 1'bX;
end 
// expected counter2_saida[ 15 ]
initial
begin
	counter2_saida_expected[15] = 1'bX;
end 
// expected counter2_saida[ 14 ]
initial
begin
	counter2_saida_expected[14] = 1'bX;
end 
// expected counter2_saida[ 13 ]
initial
begin
	counter2_saida_expected[13] = 1'bX;
end 
// expected counter2_saida[ 12 ]
initial
begin
	counter2_saida_expected[12] = 1'bX;
end 
// expected counter2_saida[ 11 ]
initial
begin
	counter2_saida_expected[11] = 1'bX;
end 
// expected counter2_saida[ 10 ]
initial
begin
	counter2_saida_expected[10] = 1'bX;
end 
// expected counter2_saida[ 9 ]
initial
begin
	counter2_saida_expected[9] = 1'bX;
end 
// expected counter2_saida[ 8 ]
initial
begin
	counter2_saida_expected[8] = 1'bX;
end 
// expected counter2_saida[ 7 ]
initial
begin
	counter2_saida_expected[7] = 1'bX;
end 
// expected counter2_saida[ 6 ]
initial
begin
	counter2_saida_expected[6] = 1'bX;
end 
// expected counter2_saida[ 5 ]
initial
begin
	counter2_saida_expected[5] = 1'bX;
end 
// expected counter2_saida[ 4 ]
initial
begin
	counter2_saida_expected[4] = 1'bX;
end 
// expected counter2_saida[ 3 ]
initial
begin
	counter2_saida_expected[3] = 1'bX;
end 
// expected counter2_saida[ 2 ]
initial
begin
	counter2_saida_expected[2] = 1'bX;
end 
// expected counter2_saida[ 1 ]
initial
begin
	counter2_saida_expected[1] = 1'bX;
end 
// expected counter2_saida[ 0 ]
initial
begin
	counter2_saida_expected[0] = 1'bX;
end 
// generate trigger
always @(counter0_saida_expected or counter0_saida or counter2_saida_expected or counter2_saida or ddd_q_expected or ddd_q or saida_expected or saida)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected counter0_saida = %b | expected counter2_saida = %b | expected ddd_q = %b | expected saida = %b | ",counter0_saida_expected_prev,counter2_saida_expected_prev,ddd_q_expected_prev,saida_expected_prev);
	$display("| real counter0_saida = %b | real counter2_saida = %b | real ddd_q = %b | real saida = %b | ",counter0_saida_prev,counter2_saida_prev,ddd_q_prev,saida_prev);
`endif
	if (
		( counter0_saida_expected_prev[0] !== 1'bx ) && ( counter0_saida_prev[0] !== counter0_saida_expected_prev[0] )
		&& ((counter0_saida_expected_prev[0] !== last_counter0_saida_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter0_saida[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter0_saida_expected_prev);
		$display ("     Real value = %b", counter0_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter0_saida_exp[0] = counter0_saida_expected_prev[0];
	end
	if (
		( counter0_saida_expected_prev[1] !== 1'bx ) && ( counter0_saida_prev[1] !== counter0_saida_expected_prev[1] )
		&& ((counter0_saida_expected_prev[1] !== last_counter0_saida_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter0_saida[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter0_saida_expected_prev);
		$display ("     Real value = %b", counter0_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter0_saida_exp[1] = counter0_saida_expected_prev[1];
	end
	if (
		( counter0_saida_expected_prev[2] !== 1'bx ) && ( counter0_saida_prev[2] !== counter0_saida_expected_prev[2] )
		&& ((counter0_saida_expected_prev[2] !== last_counter0_saida_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter0_saida[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter0_saida_expected_prev);
		$display ("     Real value = %b", counter0_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter0_saida_exp[2] = counter0_saida_expected_prev[2];
	end
	if (
		( counter0_saida_expected_prev[3] !== 1'bx ) && ( counter0_saida_prev[3] !== counter0_saida_expected_prev[3] )
		&& ((counter0_saida_expected_prev[3] !== last_counter0_saida_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter0_saida[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter0_saida_expected_prev);
		$display ("     Real value = %b", counter0_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter0_saida_exp[3] = counter0_saida_expected_prev[3];
	end
	if (
		( counter0_saida_expected_prev[4] !== 1'bx ) && ( counter0_saida_prev[4] !== counter0_saida_expected_prev[4] )
		&& ((counter0_saida_expected_prev[4] !== last_counter0_saida_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter0_saida[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter0_saida_expected_prev);
		$display ("     Real value = %b", counter0_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter0_saida_exp[4] = counter0_saida_expected_prev[4];
	end
	if (
		( counter0_saida_expected_prev[5] !== 1'bx ) && ( counter0_saida_prev[5] !== counter0_saida_expected_prev[5] )
		&& ((counter0_saida_expected_prev[5] !== last_counter0_saida_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter0_saida[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter0_saida_expected_prev);
		$display ("     Real value = %b", counter0_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter0_saida_exp[5] = counter0_saida_expected_prev[5];
	end
	if (
		( counter0_saida_expected_prev[6] !== 1'bx ) && ( counter0_saida_prev[6] !== counter0_saida_expected_prev[6] )
		&& ((counter0_saida_expected_prev[6] !== last_counter0_saida_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter0_saida[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter0_saida_expected_prev);
		$display ("     Real value = %b", counter0_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter0_saida_exp[6] = counter0_saida_expected_prev[6];
	end
	if (
		( counter0_saida_expected_prev[7] !== 1'bx ) && ( counter0_saida_prev[7] !== counter0_saida_expected_prev[7] )
		&& ((counter0_saida_expected_prev[7] !== last_counter0_saida_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter0_saida[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter0_saida_expected_prev);
		$display ("     Real value = %b", counter0_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter0_saida_exp[7] = counter0_saida_expected_prev[7];
	end
	if (
		( counter0_saida_expected_prev[8] !== 1'bx ) && ( counter0_saida_prev[8] !== counter0_saida_expected_prev[8] )
		&& ((counter0_saida_expected_prev[8] !== last_counter0_saida_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter0_saida[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter0_saida_expected_prev);
		$display ("     Real value = %b", counter0_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter0_saida_exp[8] = counter0_saida_expected_prev[8];
	end
	if (
		( counter0_saida_expected_prev[9] !== 1'bx ) && ( counter0_saida_prev[9] !== counter0_saida_expected_prev[9] )
		&& ((counter0_saida_expected_prev[9] !== last_counter0_saida_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter0_saida[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter0_saida_expected_prev);
		$display ("     Real value = %b", counter0_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter0_saida_exp[9] = counter0_saida_expected_prev[9];
	end
	if (
		( counter0_saida_expected_prev[10] !== 1'bx ) && ( counter0_saida_prev[10] !== counter0_saida_expected_prev[10] )
		&& ((counter0_saida_expected_prev[10] !== last_counter0_saida_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter0_saida[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter0_saida_expected_prev);
		$display ("     Real value = %b", counter0_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter0_saida_exp[10] = counter0_saida_expected_prev[10];
	end
	if (
		( counter0_saida_expected_prev[11] !== 1'bx ) && ( counter0_saida_prev[11] !== counter0_saida_expected_prev[11] )
		&& ((counter0_saida_expected_prev[11] !== last_counter0_saida_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter0_saida[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter0_saida_expected_prev);
		$display ("     Real value = %b", counter0_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter0_saida_exp[11] = counter0_saida_expected_prev[11];
	end
	if (
		( counter0_saida_expected_prev[12] !== 1'bx ) && ( counter0_saida_prev[12] !== counter0_saida_expected_prev[12] )
		&& ((counter0_saida_expected_prev[12] !== last_counter0_saida_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter0_saida[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter0_saida_expected_prev);
		$display ("     Real value = %b", counter0_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter0_saida_exp[12] = counter0_saida_expected_prev[12];
	end
	if (
		( counter0_saida_expected_prev[13] !== 1'bx ) && ( counter0_saida_prev[13] !== counter0_saida_expected_prev[13] )
		&& ((counter0_saida_expected_prev[13] !== last_counter0_saida_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter0_saida[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter0_saida_expected_prev);
		$display ("     Real value = %b", counter0_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter0_saida_exp[13] = counter0_saida_expected_prev[13];
	end
	if (
		( counter0_saida_expected_prev[14] !== 1'bx ) && ( counter0_saida_prev[14] !== counter0_saida_expected_prev[14] )
		&& ((counter0_saida_expected_prev[14] !== last_counter0_saida_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter0_saida[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter0_saida_expected_prev);
		$display ("     Real value = %b", counter0_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter0_saida_exp[14] = counter0_saida_expected_prev[14];
	end
	if (
		( counter0_saida_expected_prev[15] !== 1'bx ) && ( counter0_saida_prev[15] !== counter0_saida_expected_prev[15] )
		&& ((counter0_saida_expected_prev[15] !== last_counter0_saida_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter0_saida[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter0_saida_expected_prev);
		$display ("     Real value = %b", counter0_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter0_saida_exp[15] = counter0_saida_expected_prev[15];
	end
	if (
		( counter0_saida_expected_prev[16] !== 1'bx ) && ( counter0_saida_prev[16] !== counter0_saida_expected_prev[16] )
		&& ((counter0_saida_expected_prev[16] !== last_counter0_saida_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter0_saida[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter0_saida_expected_prev);
		$display ("     Real value = %b", counter0_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter0_saida_exp[16] = counter0_saida_expected_prev[16];
	end
	if (
		( counter0_saida_expected_prev[17] !== 1'bx ) && ( counter0_saida_prev[17] !== counter0_saida_expected_prev[17] )
		&& ((counter0_saida_expected_prev[17] !== last_counter0_saida_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter0_saida[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter0_saida_expected_prev);
		$display ("     Real value = %b", counter0_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter0_saida_exp[17] = counter0_saida_expected_prev[17];
	end
	if (
		( counter0_saida_expected_prev[18] !== 1'bx ) && ( counter0_saida_prev[18] !== counter0_saida_expected_prev[18] )
		&& ((counter0_saida_expected_prev[18] !== last_counter0_saida_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter0_saida[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter0_saida_expected_prev);
		$display ("     Real value = %b", counter0_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter0_saida_exp[18] = counter0_saida_expected_prev[18];
	end
	if (
		( counter0_saida_expected_prev[19] !== 1'bx ) && ( counter0_saida_prev[19] !== counter0_saida_expected_prev[19] )
		&& ((counter0_saida_expected_prev[19] !== last_counter0_saida_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter0_saida[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter0_saida_expected_prev);
		$display ("     Real value = %b", counter0_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter0_saida_exp[19] = counter0_saida_expected_prev[19];
	end
	if (
		( counter2_saida_expected_prev[0] !== 1'bx ) && ( counter2_saida_prev[0] !== counter2_saida_expected_prev[0] )
		&& ((counter2_saida_expected_prev[0] !== last_counter2_saida_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter2_saida[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter2_saida_expected_prev);
		$display ("     Real value = %b", counter2_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_counter2_saida_exp[0] = counter2_saida_expected_prev[0];
	end
	if (
		( counter2_saida_expected_prev[1] !== 1'bx ) && ( counter2_saida_prev[1] !== counter2_saida_expected_prev[1] )
		&& ((counter2_saida_expected_prev[1] !== last_counter2_saida_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter2_saida[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter2_saida_expected_prev);
		$display ("     Real value = %b", counter2_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_counter2_saida_exp[1] = counter2_saida_expected_prev[1];
	end
	if (
		( counter2_saida_expected_prev[2] !== 1'bx ) && ( counter2_saida_prev[2] !== counter2_saida_expected_prev[2] )
		&& ((counter2_saida_expected_prev[2] !== last_counter2_saida_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter2_saida[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter2_saida_expected_prev);
		$display ("     Real value = %b", counter2_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_counter2_saida_exp[2] = counter2_saida_expected_prev[2];
	end
	if (
		( counter2_saida_expected_prev[3] !== 1'bx ) && ( counter2_saida_prev[3] !== counter2_saida_expected_prev[3] )
		&& ((counter2_saida_expected_prev[3] !== last_counter2_saida_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter2_saida[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter2_saida_expected_prev);
		$display ("     Real value = %b", counter2_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_counter2_saida_exp[3] = counter2_saida_expected_prev[3];
	end
	if (
		( counter2_saida_expected_prev[4] !== 1'bx ) && ( counter2_saida_prev[4] !== counter2_saida_expected_prev[4] )
		&& ((counter2_saida_expected_prev[4] !== last_counter2_saida_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter2_saida[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter2_saida_expected_prev);
		$display ("     Real value = %b", counter2_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_counter2_saida_exp[4] = counter2_saida_expected_prev[4];
	end
	if (
		( counter2_saida_expected_prev[5] !== 1'bx ) && ( counter2_saida_prev[5] !== counter2_saida_expected_prev[5] )
		&& ((counter2_saida_expected_prev[5] !== last_counter2_saida_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter2_saida[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter2_saida_expected_prev);
		$display ("     Real value = %b", counter2_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_counter2_saida_exp[5] = counter2_saida_expected_prev[5];
	end
	if (
		( counter2_saida_expected_prev[6] !== 1'bx ) && ( counter2_saida_prev[6] !== counter2_saida_expected_prev[6] )
		&& ((counter2_saida_expected_prev[6] !== last_counter2_saida_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter2_saida[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter2_saida_expected_prev);
		$display ("     Real value = %b", counter2_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_counter2_saida_exp[6] = counter2_saida_expected_prev[6];
	end
	if (
		( counter2_saida_expected_prev[7] !== 1'bx ) && ( counter2_saida_prev[7] !== counter2_saida_expected_prev[7] )
		&& ((counter2_saida_expected_prev[7] !== last_counter2_saida_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter2_saida[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter2_saida_expected_prev);
		$display ("     Real value = %b", counter2_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_counter2_saida_exp[7] = counter2_saida_expected_prev[7];
	end
	if (
		( counter2_saida_expected_prev[8] !== 1'bx ) && ( counter2_saida_prev[8] !== counter2_saida_expected_prev[8] )
		&& ((counter2_saida_expected_prev[8] !== last_counter2_saida_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter2_saida[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter2_saida_expected_prev);
		$display ("     Real value = %b", counter2_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_counter2_saida_exp[8] = counter2_saida_expected_prev[8];
	end
	if (
		( counter2_saida_expected_prev[9] !== 1'bx ) && ( counter2_saida_prev[9] !== counter2_saida_expected_prev[9] )
		&& ((counter2_saida_expected_prev[9] !== last_counter2_saida_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter2_saida[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter2_saida_expected_prev);
		$display ("     Real value = %b", counter2_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_counter2_saida_exp[9] = counter2_saida_expected_prev[9];
	end
	if (
		( counter2_saida_expected_prev[10] !== 1'bx ) && ( counter2_saida_prev[10] !== counter2_saida_expected_prev[10] )
		&& ((counter2_saida_expected_prev[10] !== last_counter2_saida_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter2_saida[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter2_saida_expected_prev);
		$display ("     Real value = %b", counter2_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_counter2_saida_exp[10] = counter2_saida_expected_prev[10];
	end
	if (
		( counter2_saida_expected_prev[11] !== 1'bx ) && ( counter2_saida_prev[11] !== counter2_saida_expected_prev[11] )
		&& ((counter2_saida_expected_prev[11] !== last_counter2_saida_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter2_saida[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter2_saida_expected_prev);
		$display ("     Real value = %b", counter2_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_counter2_saida_exp[11] = counter2_saida_expected_prev[11];
	end
	if (
		( counter2_saida_expected_prev[12] !== 1'bx ) && ( counter2_saida_prev[12] !== counter2_saida_expected_prev[12] )
		&& ((counter2_saida_expected_prev[12] !== last_counter2_saida_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter2_saida[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter2_saida_expected_prev);
		$display ("     Real value = %b", counter2_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_counter2_saida_exp[12] = counter2_saida_expected_prev[12];
	end
	if (
		( counter2_saida_expected_prev[13] !== 1'bx ) && ( counter2_saida_prev[13] !== counter2_saida_expected_prev[13] )
		&& ((counter2_saida_expected_prev[13] !== last_counter2_saida_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter2_saida[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter2_saida_expected_prev);
		$display ("     Real value = %b", counter2_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_counter2_saida_exp[13] = counter2_saida_expected_prev[13];
	end
	if (
		( counter2_saida_expected_prev[14] !== 1'bx ) && ( counter2_saida_prev[14] !== counter2_saida_expected_prev[14] )
		&& ((counter2_saida_expected_prev[14] !== last_counter2_saida_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter2_saida[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter2_saida_expected_prev);
		$display ("     Real value = %b", counter2_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_counter2_saida_exp[14] = counter2_saida_expected_prev[14];
	end
	if (
		( counter2_saida_expected_prev[15] !== 1'bx ) && ( counter2_saida_prev[15] !== counter2_saida_expected_prev[15] )
		&& ((counter2_saida_expected_prev[15] !== last_counter2_saida_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter2_saida[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter2_saida_expected_prev);
		$display ("     Real value = %b", counter2_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_counter2_saida_exp[15] = counter2_saida_expected_prev[15];
	end
	if (
		( counter2_saida_expected_prev[16] !== 1'bx ) && ( counter2_saida_prev[16] !== counter2_saida_expected_prev[16] )
		&& ((counter2_saida_expected_prev[16] !== last_counter2_saida_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter2_saida[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter2_saida_expected_prev);
		$display ("     Real value = %b", counter2_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_counter2_saida_exp[16] = counter2_saida_expected_prev[16];
	end
	if (
		( counter2_saida_expected_prev[17] !== 1'bx ) && ( counter2_saida_prev[17] !== counter2_saida_expected_prev[17] )
		&& ((counter2_saida_expected_prev[17] !== last_counter2_saida_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter2_saida[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter2_saida_expected_prev);
		$display ("     Real value = %b", counter2_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_counter2_saida_exp[17] = counter2_saida_expected_prev[17];
	end
	if (
		( counter2_saida_expected_prev[18] !== 1'bx ) && ( counter2_saida_prev[18] !== counter2_saida_expected_prev[18] )
		&& ((counter2_saida_expected_prev[18] !== last_counter2_saida_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter2_saida[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter2_saida_expected_prev);
		$display ("     Real value = %b", counter2_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_counter2_saida_exp[18] = counter2_saida_expected_prev[18];
	end
	if (
		( counter2_saida_expected_prev[19] !== 1'bx ) && ( counter2_saida_prev[19] !== counter2_saida_expected_prev[19] )
		&& ((counter2_saida_expected_prev[19] !== last_counter2_saida_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter2_saida[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter2_saida_expected_prev);
		$display ("     Real value = %b", counter2_saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_counter2_saida_exp[19] = counter2_saida_expected_prev[19];
	end
	if (
		( ddd_q_expected_prev !== 1'bx ) && ( ddd_q_prev !== ddd_q_expected_prev )
		&& ((ddd_q_expected_prev !== last_ddd_q_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ddd_q :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ddd_q_expected_prev);
		$display ("     Real value = %b", ddd_q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ddd_q_exp = ddd_q_expected_prev;
	end
	if (
		( saida_expected_prev !== 1'bx ) && ( saida_prev !== saida_expected_prev )
		&& ((saida_expected_prev !== last_saida_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_exp = saida_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module oscilador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg afinar;
reg clock;
reg enable;
reg up_down;
// wires                                               
wire [19:0] counter0_saida;
wire [19:0] counter2_saida;
wire ddd_q;
wire saida;

wire sampler;                             

// assign statements (if any)                          
oscilador i1 (
// port map - connection between master ports and signals/registers   
	.afinar(afinar),
	.clock(clock),
	.counter0_saida(counter0_saida),
	.counter2_saida(counter2_saida),
	.ddd_q(ddd_q),
	.enable(enable),
	.saida(saida),
	.up_down(up_down)
);

// afinar
initial
begin
	afinar = 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #50 1'b1;
	#50;
end 

// enable
initial
begin
	enable = 1'b1;
end 

// up_down
initial
begin
	up_down = 1'b1;
	# 10000;
	repeat(49)
	begin
		up_down = 1'b0;
		up_down = #10000 1'b1;
		# 10000;
	end
	up_down = 1'b0;
end 

oscilador_vlg_sample_tst tb_sample (
	.afinar(afinar),
	.clock(clock),
	.enable(enable),
	.up_down(up_down),
	.sampler_tx(sampler)
);

oscilador_vlg_check_tst tb_out(
	.counter0_saida(counter0_saida),
	.counter2_saida(counter2_saida),
	.ddd_q(ddd_q),
	.saida(saida),
	.sampler_rx(sampler)
);
endmodule

